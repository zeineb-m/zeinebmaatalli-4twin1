pipeline {
    agent any
 options {
        skipDefaultCheckout()
    }

  
    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }

    environment {
        IMAGE_NAME = 'zeinebmaatalli/kaddem'               // Backend image
        FRONT_IMAGE = 'zeinebmaatalli/front-equipe'        // Frontend image
        DOCKER_USERNAME = 'zeinebmaatalli'
        DOCKER_PASSWORD = 'Zeineb123'
        COMPOSE_FILE = 'docker-compose.yml'
    }

    stages {
        stage('1. Clone Backend Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/zeineb-m/zeinebmaatalli-4TWIN1-G6.git'
            }
        }

        stage('2. Clone Frontend Repository') {
            steps {
                sh '''
                    git clone https://github.com/zeineb-m/equipe.git ../equipe
                '''
            }
        }

        stage('3. Check Maven Version') {
            steps {
                sh 'mvn -version'
            }
        }

        stage('4. Compile Project') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('5. Run Tests') {
            steps {
                sh 'mvn test'
            }
        }

        stage('6. SonarQube Analysis') {
            steps {
                sh '''
                    mvn sonar:sonar \
                    -Dsonar.login=squ_5cd14c3d1442652f6739461650faa58ab2be84ac
                '''
            }
        }

        stage('7. Package Application') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }

        stage('8. Deploy to Nexus') {
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }

        stage('9. Build Backend Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME .'
            }
        }

        stage('10. Build Frontend Docker Image') {
            steps {
                sh 'docker build -t $FRONT_IMAGE -f ../equipe/dockerfile ../equipe'
            }
        }

        stage('11. Push Docker Images to Docker Hub') {
            steps {
                sh '''
                    echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                    docker push $IMAGE_NAME
                    docker push $FRONT_IMAGE
                '''
            }
        }

        stage('12. Restart Services with Docker Compose') {
            steps {
                sh '''
                    docker-compose -f $COMPOSE_FILE down || true
                    docker-compose -f $COMPOSE_FILE up -d --build
                '''
            }
        }
    }
}
